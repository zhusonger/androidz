apply plugin: 'com.android.application'
apply plugin: 'cn.com.lasong.time'
apply plugin: 'cn.com.lasong.inject'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    defaultConfig {
        applicationId "cn.com.lasong"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
//    implementation 'cn.com.lasong:base:0.0.2'
    implementation 'cn.com.lasong:widget:0.0.3'
    implementation 'cn.com.lasong:media:0.0.4'
    implementation project(":base")
//    implementation project(":widget")
//    implementation project(":media")

    // 单独添加核心 module Transferee, 之后至少还需要添加以下三种图片加载器中的一种
    implementation "com.github.Hitomis.transferee:Transferee:1.6.1@aar"
    // 添加 Glide 图片加载器
    implementation 'com.github.Hitomis.transferee:GlideImageLoader:1.6.1'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
}

allInjects {
    injectDebug true
    injectDomains {
        // 远程库
        base {
            // 注入的库名
            // 主要减少性能消耗, 有针对性的进行处理
            // 1.implementation方式的使用[具体的引入库], 如 cn.com.lasong:widget:0.0.2
            // 2.本地的jar或者aar使用[文件名, 不用后缀], 如 agora-rtc-sdk
            // 3.项目源码使用[:项目名称:子项目名称1:子项目名称2],
            //  3.1.如应用模块叫app, 就使用:app
            //  3.2.app模块下的子模块sub, 就使用 :app:sub
            group "cn.com.lasong:base:0.0.2"
            // 新增字节码文件夹路径
            clzNewDir "classes/base"
        }

        // 本地jar包
        agora {
            group "agora-rtc-sdk"
            clzNewDir "classes/agora"
            // 需要修改的字节码包
            clzModify = [
                    [
                            className : 'io.agora.rtc.internal.RtcEngineImpl',
                            importPackages : [
                                    "java.io",
                                    "android.util.Log",
                                    "cn.com.lasong",
                                    "io.agora.rtc.internal"
                            ],
                            addFields : [
                                    "public String stringValue;",
                                    "public int intValue;",
                                    "public static boolean booleanValue;",
                                    "public TestCreate2 test;"
                            ],
                            addMethods : [
                                    """
                                    public RtcEngineImpl addMethod() {
                                        RtcEngineImpl aaa = null;
                                        intValue = 1;
                                        booleanValue = false;
                                        stringValue = "addMethod";
                                        System.out.println("addMethod");
                                        return aaa;
                                    }
                                    """,
                                    """
                                    public void addMethod_jhdfsadf() {
                                        RtcEngineImpl hhhhh;

                                        if (booleanValue) {
                                             hhhhh = this;
                                        }
                                        Log.e("Test", "addMethod_jhdfsadf");
                                    }
                                    """,
                            ]
                    ],
                    [
                            className : 'cn.com.lasong.TestCreate2',
                            importPackages : [
                                    "java.io",
                                    "android.util.Log",
                                    "cn.com.lasong",
                                    "io.agora.rtc.internal"
                            ],
                            addFields : [
                                    "public String stringValue;",
                                    "public int intValue;",
                                    "public static boolean booleanValue;"
                            ],
                            addMethods : [
                                    """
                                    public RtcEngineImpl addMethod() {
                                        RtcEngineImpl aaa = null;
                                        intValue = 1;
                                        booleanValue = false;
                                        stringValue = "addMethod";
                                        System.out.println("addMethod");
                                        return aaa;
                                    }
                                    """,
                                    """
                                    public void addMethod_jhdfsadf() {
                                        RtcEngineImpl hhhhh;

                                        if (booleanValue) {
                                             hhhhh = this;
                                        }
                                        Log.e("Test", "addMethod_jhdfsadf");
                                    }
                                    """,
                            ]
                    ]
            ]
        }

        // 本地项目, 只能注入到当前应用插件的项目
        // 比如这里设置依赖的本地库 :base, 这里是不会处理的
        // 优先级是被依赖的项目先进行注入, 再注入当前的项目
        app {
            group ":app"
            clzNewDir "classes/app"
        }
    }
}